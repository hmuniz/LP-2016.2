#+Title: Exercício 2.70

* Enunciado

The following eight-symbol alphabet with associated relative
frequencies was designed to efficiently encode the lyrics of 1950s
rock songs. (Note that the ``symbols'' of an ``alphabet'' need not be
individual letters.)

#+BEGIN_EXAMPLE
A 2 NA 16 BOOM 1 SHA 3 GET 2 YIP 9 JOB 2 WAH 1
#+END_EXAMPLE

Use =generate-huffman-tree= (exercise 2.69) to generate a
corresponding Huffman tree, and use =encode= (exercise 2.68) to encode
the following message:

#+BEGIN_EXAMPLE
Get a job

Sha na na na na na na na na

Get a job

Sha na na na na na na na na

Wah yip yip yip yip yip yip yip yip yip

Sha boom
#+END_EXAMPLE

How many bits are required for the encoding? What is the smallest
number of bits that would be needed to encode this song if we used a
fixed-length code for the eight-symbol alphabet?

* Solução

Abaixo o =generator-huffman-tree= do exercício 2.69:

#+BEGIN_SRC scheme
(define (encode-symbol letter tree)
  (define (iter symbol tree code)
    (if (leaf? tree)
        code
        (if (element-of-tree? symbol (left-branch tree))
            (iter symbol (left-branch tree) (append code '(0)))
            (iter symbol (right-branch tree) (append code '(1))))))
  (iter letter tree '()))

(define (element-of-tree? symbol tree)
  (define (aux x set)
    (cond ((null? set) false)
          ((equal? x (car set)) true)
          (else (aux x (cdr set)))))
  (aux symbol (symbols tree)))

(define (make-leaf symbol weight)
  (list 'leaf symbol weight))

(define (leaf? object)
  (eq? (car object) 'leaf))

(define (symbol-leaf x) (cadr x))

(define (weight-leaf x) (caddr x))

(define (make-code-tree left right)
  (list left
        right
        (append (symbols left) 
                (symbols right))
        (+ (weight left) (weight right))))

(define (left-branch tree) (car tree))
(define (right-branch tree) (cadr tree))

(define (symbols tree)
  (if (leaf? tree)
      (list (symbol-leaf tree))
      (caddr tree)))

(define (weight tree)
  (if (leaf? tree)
      (weight-leaf tree)
      (cadddr tree)))

(define (decode bits tree)
  (define (decode-1 bits current-branch)
    (if (null? bits)
        '()
        (let ((next-branch
               (choose-branch 
                (car bits) 
                current-branch)))
          (if (leaf? next-branch)
              (cons (symbol-leaf next-branch)
                    (decode-1 (cdr bits) tree))
              (decode-1 (cdr bits) next-branch)))))
  (decode-1 bits tree))

(define (choose-branch bit branch)
  (cond ((= bit 0) (left-branch branch))
        ((= bit 1) (right-branch branch))
        (else (error "bad bit: CHOOSE-BRANCH" bit))))

(define (encode message tree)
  (if (null? message)
      '()
      (append 
       (encode-symbol (car message) 
                      tree)
       (encode (cdr message) tree))))


(define (generate-huffman-tree pairs)
  (successive-merge 
   (make-leaf-set pairs)))

(define (successive-merge leafs)
  (if (empty? (cdr leafs))
      (car leafs)
      (successive-merge (merge-lowers leafs))))

(define (merge-lowers leafs)
  (define (aux lower leafs)
    (let ((second-lower (lower-weight leafs)))
      (append
       (remove second-lower leafs)
       (list (make-code-tree second-lower lower)))))
  (aux (lower-weight leafs) (remove (lower-weight leafs) leafs)))

(define (lower-weight leafs)
  (define (aux list lower)
    (if (empty? list)
        lower
        (if (>= (weight (car list))
                (weight lower))
            (aux (cdr list) lower)
            (aux (cdr list) (car list)))))
  (aux (cdr leafs) (car leafs)))

(define (make-leaf-set pairs)
  (if (null? pairs)
      '()
      (let ((pair (car pairs)))
        (adjoin-set 
         (make-leaf (car pair)    
                    (cadr pair))  
         (make-leaf-set (cdr pairs))))))

(define (adjoin-set x set)
  (cond ((null? set) (list x))
        ((< (weight x) (weight (car set))) 
         (cons x set))
        (else 
         (cons (car set)
               (adjoin-set x (cdr set))))))

#+END_SRC

Implementações exercício 2.70:

#+BEGIN_SRC scheme
(define rock-song '(GET A JOB
                        SHA NA NA NA NA NA NA NA NA
                        GET A JOB SHA NA NA NA NA NA NA NA NA
                        WAH YIP YIP YIP YIP YIP YIP YIP YIP YIP
                        SHA BOOM))

(define pairs '((A 2) (NA 16) (BOOM 1) (SHA 3) (GET 2) (YIP 9) (JOB 2) (WAH 1)))

(define Huffman-tree-song (generate-huffman-tree pairs))

#+END_SRC

#+BEGIN_EXAMPLE
> (length (encode rock-song Huffman-tree-song))
84
> (length rock-song)
36
#+END_EXAMPLE

Para o enconding são necessários 108 bits. O mínimo de bit necessário
são 3 (2^3 = 8 ), pois a quantidade de bits será o x * log2n, onde x é
o "tamanho" da música e n=8.
